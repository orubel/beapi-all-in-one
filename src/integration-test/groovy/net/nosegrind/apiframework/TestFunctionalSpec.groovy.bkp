package net.nosegrind.apiframework

import grails.testing.mixin.integration.Integration
import grails.gorm.transactions.*
import spock.lang.*
import geb.spock.*
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.context.ApplicationContext
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*
import grails.util.Metadata
import groovy.json.JsonSlurper
import grails.util.Holders
import net.nosegrind.apiframework.ApiCacheService

/**
 * Testing Template for Bootstrapping. Do NOT bootstrap Person Class as that is handled by TestService
 */
@Integration
@Rollback
class TestFunctionalSpec extends Specification {

    @Autowired
    ApplicationContext applicationContext
    def grailsApplication
    def testService
    def springSecurityService
    Class clazz
    String appVersion = "v${Metadata.current.getProperty(Metadata.APPLICATION_VERSION, String.class)}"
    String testDomain
    String controller
    List adminRoles
    ApiCacheService apiCacheService
    LinkedHashMap cache

    void setup() {
        this.controller = 'person' // init
        this.cache = apiCacheService.getApiCache(controller)
        this.testService = applicationContext.getBean("testService")
        this.springSecurityService = applicationContext.getBean("springSecurityService")
        ApiCacheService apiCacheService = applicationContext.getBean("apiCacheService")

        // Controllers Loop
        grailsApplication.controllerClasses.each { controllerArtefact ->
            //def controllerClass = controllerArtefact.getClazz()
            this.controller = controllerArtefact.getLogicalPropertyName()
            LinkedHashMap cache2 = apiCacheService.getApiCache(this.controller)
            if(cache2){
                println("### ${this.controller} EXISTS!!! ###")
            }
        }

        //this.cache = this.testService.cache
        this.testService.initTest(this.controller)
        String className = this.controller.capitalize()
        this.clazz = grailsApplication.domainClasses.find { it.clazz.simpleName == className }.clazz
        this.testDomain = Holders.grailsApplication.config.environments.test.grails.serverURL
        this.adminRoles = Holders.grailsApplication.config.apitoolkit.admin.roles as List
    }

    void "API TEST for list  (non-admin)"() {
        setup:"get data"
        def info
            String METHOD = "GET"
            String action = 'list'
            String version = this.cache['currentStable']['value']
            List endPointRoles = this.cache[version][action]['roles'] as List
            boolean userAccess = userHasAccess(endPointRoles)
            if(userAccess) {
                int num = this.clazz.count()
                def proc = ["curl", "-H", "Content-Type: application/json", "-H", "Authorization: Bearer ${this.testService.user.token}", "--request", "${METHOD}", "${this.testDomain}/${this.appVersion}/${this.controller}/${action}"].execute();
                proc.waitFor()
                StringBuffer outputStream = new StringBuffer()
                StringWriter error = new StringWriter()
                proc.waitForProcessOutput(outputStream, error)
                String output = outputStream.toString()

                if (output) {
                    info = new JsonSlurper().parseText(output)
                } else {
                    ArrayList stdErr = error.toString().split('> \n')

                }
            }
        when:"data is not null"
            if(userAccess) {
                assert info != null
            }else{
                assert info == null
            }
        then:"test data"
            if(userAccess) {
                assert num == info.size()
            }
    }
/*
    void "API TEST for show (non-admin)"(){
        setup:"get data"
            LinkedHashMap info
            String METHOD = "GET"
            String action = 'show'
            //String data = "{'id': '${this.testService.user.id}'}"
	        String endpoint = "${this.testDomain}/${this.appVersion}/${this.controller}/${action}" as String
            LinkedHashMap mockData = this.testService.userMockData
            info = this.testService.getJSON(endpoint)
        when:"data is not null"
            assert info!=null
        then:"test data"
            mockData.each{ k,v ->
                assert v==info["${k}"]
            }
    }

    void "API TEST for create"(){
        String METHOD = "POST"
        String action = 'create'
        String receivesData = this.testService.createRecievesMockData(action)
        LinkedHashMap returnsData = this.testService.createReturnsMockData(action)
    }

    void "API TEST for update"(){
        String METHOD = "PUT"
        String action = 'update'
        String receivesData = this.testService.createRecievesMockData(action)
        LinkedHashMap returnsData = this.testService.createReturnsMockData(action)
    }

    void "API TEST for delete"(){
        String METHOD = "DELETE"
        String action = 'delete'
        String data = "{'id': '${this.testService.user.id}'}"
    }
*/

    void cleanup() {
        this.testService.cleanupTest()
    }

    protected boolean isSuperuser() {
        this.testService.user.authorities.each() {
            if(this.adminRoles.contains(it)){
                return true
            }
        }
        return false
    }

    protected boolean userHasAccess(List endPointRoles) {
        this.testService.user.authorities.each() {
            if(endPointRoles.contains(it)){
                return true
            }
        }
        return false
    }
}

